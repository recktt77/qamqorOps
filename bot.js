const { Telegraf, Markup } = require('telegraf');
const { BOT_TOKEN } = require('./config/env');
const sessionMiddleware = require('./middlewares/sessionMiddleware');
const { isDeveloper, isWorker } = require('./utils/helpers');

// Import keyboards
const clientMenu = require('./keyboards/clientMenu');
const developerMenu = require('./keyboards/developerMenu');
const workersMenu = require('./keyboards/workersMenu');

// Import handlers
const {
  createTask,
  editTask,
  deleteTaskCommand,
  viewProgress,
  processText
} = require('./handlers/clientHandlers');
const {
  listTasks,
  createTZ,
  listInProgressTasks,
  listCompletedTasks,
  processDevText
} = require('./handlers/developerHandlers');
const {
  listAvailableTZ,
  declineWork,
  completeWork,
  handleTZAction
} = require('./handlers/workerHandlers');
const { handleClientCallbacks, handleTaskHistory, handleTZHistory } = require('./handlers/callbackHandlers');

const bot = new Telegraf(BOT_TOKEN);

// Middleware
bot.use(sessionMiddleware);

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(async (ctx, next) => {
  const username = ctx.from?.username;
  console.log(`User ${username} (isDeveloper: ${isDeveloper(username)}, isWorker: ${isWorker(username)}) made request`);
  await next();
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è menu bar
bot.telegram.setMyCommands([
  { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  { command: 'menu', description: '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é' },
  { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å' },
  { command: 'cancel', description: '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ' }
]);

// Helper function to show appropriate menu
const fs = require('fs');


async function showMenu(ctx) {
  const username = ctx.from.username;
  const imagePath = './images/qamqor.png'; // –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  let buttons = [];

  console.log(`Showing menu for user ${username}`);
  console.log(`isDeveloper: ${isDeveloper(username)}`);
  console.log(`isWorker: ${isWorker(username)}`);

  if (isDeveloper(username)) {
    buttons = [
      [
        Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', 'dev_list_tasks'),
        Markup.button.callback('üìÑ –°–æ–∑–¥–∞—Ç—å –¢–ó', 'dev_create_tz')
      ],
      [
        Markup.button.callback('üöß –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', 'dev_in_progress'),
        Markup.button.callback('‚úÖ –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏', 'dev_completed')
      ]
    ];
    await ctx.replyWithPhoto(
      { source: fs.createReadStream(imagePath) },
      {
        caption: `<b>–ú–µ–Ω—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard(buttons).reply_markup // –ó–¥–µ—Å—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
      }
    );
  } else if (isWorker(username)) {
    buttons = [
      [
        Markup.button.callback('üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¢–ó', 'worker_available_tz')
      ],
      [
        Markup.button.callback('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞–±–æ—Ç—ã', 'worker_decline'),
        Markup.button.callback('‚úî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É', 'worker_complete')
      ]
    ];
    await ctx.replyWithPhoto(
      { source: fs.createReadStream(imagePath) },
      {
        caption: `<b>–ú–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard(buttons).reply_markup // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
      }
    );
  } else {
    buttons = [
      [
        Markup.button.callback('üìù –ó–∞–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É', 'client_create_task'),
        Markup.button.callback('‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É', 'client_edit_task')
      ],
      [
        Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', 'client_delete_task'),
        Markup.button.callback('üîó –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', 'client_view_progress')
      ]
    ];
    await ctx.replyWithPhoto(
      { source: fs.createReadStream(imagePath) },
      {
        caption: `<b>–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        parse_mode: 'HTML',
        reply_markup: Markup.inlineKeyboard(buttons).reply_markup // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
      }
    );
  }
}



// Start command
bot.start(async (ctx) => {
  try {
    const username = ctx.from.username;
    console.log(`Start command from user ${username}`);
    let message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ';

    if (isDeveloper(username)) {
      message += '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫.';
      console.log(`${username} authorized as developer`);
    } else if (isWorker(username)) {
      message += '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.';
      console.log(`${username} authorized as worker`);
    } else {
      message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.';
      console.log(`${username} authorized as client`);
    }

    await ctx.reply(message);
    await showMenu(ctx);
  } catch (error) {
    console.error('Error in start command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.');
  }
});

// Menu command
bot.command('menu', showMenu);

// Help command
bot.command('help', async (ctx) => {
  const username = ctx.from.username;
  let helpText = 'üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n';

  if (isDeveloper(username)) {
    helpText += 'üë®‚Äçüíª –ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n';
    helpText += '‚Ä¢ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á - –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á\n';
    helpText += '‚Ä¢ –°–æ–∑–¥–∞—Ç—å –¢–ó - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n';
    helpText += '‚Ä¢ –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n';
    helpText += '‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n';
  } else if (isWorker(username)) {
    helpText += 'üë∑ –ö–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:\n';
    helpText += '‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¢–ó - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n';
    helpText += '‚Ä¢ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞–±–æ—Ç—ã - –æ—Ç–∫–∞–∑ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n';
    helpText += '‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n';
  } else {
    helpText += 'üë§ –ö–æ–º–∞–Ω–¥—ã –∫–ª–∏–µ–Ω—Ç–∞:\n';
    helpText += '‚Ä¢ –ó–∞–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n';
    helpText += '‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É - –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏\n';
    helpText += '‚Ä¢ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏\n';
    helpText += '‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á\n';
  }

  helpText += '\nüîÑ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n';
  helpText += '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n';
  helpText += '/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n';
  helpText += '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n';
  helpText += '/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ';

  await ctx.reply(helpText);
});

// Handle callback queries
bot.on('callback_query', async (ctx) => {
  const action = ctx.callbackQuery.data;
  const username = ctx.from.username;

  try {
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    await ctx.answerCbQuery().catch(console.error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    if (action.startsWith('task_history:')) {
      const taskId = action.split(':')[1];
      await handleTaskHistory(ctx, taskId);
      return;
    }

    if (action.startsWith('tz_history:')) {
      const tzId = action.split(':')[1];
      await handleTZHistory(ctx, tzId);
      return;
    }

    if (action === 'back_to_menu') {
      await showMenu(ctx);
      return;
    }

    // Client actions
    if (action === 'client_create_task') {
      ctx.session = {};
      await createTask(ctx);
    } else if (action === 'client_edit_task') {
      await editTask(ctx);
    } else if (action === 'client_delete_task') {
      await deleteTaskCommand(ctx);
    } else if (action === 'client_view_progress') {
      await viewProgress(ctx);
    }

    // Developer actions
    else if (isDeveloper(username)) {
      if (action === 'dev_list_tasks') {
        await listTasks(ctx);
      } else if (action === 'dev_create_tz') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó
        const Task = require('./models/task');
        const tasks = await Task.find({ status: 'new' }).sort({ _id: -1 });

        if (tasks.length === 0) {
          await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó.');
          return;
        }

        const buttons = tasks.map(task => {
          const shortDesc = task.description.substring(0, 30) + (task.description.length > 30 ? '...' : '');
          return [Markup.button.callback(`üìù ${shortDesc}`, `create_tz:${task._id}`)];
        });

        await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¢–ó:',
          Markup.inlineKeyboard([
            ...buttons,
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_tz')]
          ])
        );
      } else if (action === 'dev_in_progress') {
        await listInProgressTasks(ctx);
      } else if (action === 'dev_completed') {
        await listCompletedTasks(ctx);
      } else if (action.startsWith('create_tz:')) {
        const taskId = action.split(':')[1];
        ctx.session = {
          step: 'waiting_for_tz_description',
          taskId: taskId
        };
        const task = await require('./models/task').findById(taskId);
        await ctx.reply(
          'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:\n\n' +
          '–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞:\n' +
          `${task.description}\n\n` +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'
        );
      } else if (action.startsWith('take_task:')) {
        const taskId = action.split(':')[1];
        ctx.session = {
          step: 'waiting_for_tz_description',
          taskId: taskId
        };
        const task = await require('./models/task').findById(taskId);
        await ctx.reply(
          'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:\n\n' +
          '–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞:\n' +
          `${task.description}\n\n` +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'
        );
      }
    }

    // Worker actions
    else if (isWorker(username)) {
      if (action === 'worker_available_tz') {
        await listAvailableTZ(ctx);
      } else if (action === 'worker_decline') {
        await declineWork(ctx);
      } else if (action === 'worker_complete') {
        await completeWork(ctx);
      } else if (action.startsWith('take_tz:')) {
        const tzId = action.split(':')[1];
        await handleTZAction(ctx, 'take', tzId);
      } else if (action.startsWith('decline_tz:')) {
        const tzId = action.split(':')[1];
        await handleTZAction(ctx, 'decline', tzId);
      } else if (action.startsWith('complete_tz:')) {
        const tzId = action.split(':')[1];
        await handleTZAction(ctx, 'complete', tzId);
      }
    }

    // Other callbacks
    else {
      await handleClientCallbacks(ctx);
    }
  } catch (error) {
    console.error('Error handling callback:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.');
  }
});

// Cancel command
bot.command('cancel', async (ctx) => {
  ctx.session = {};
  await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  await showMenu(ctx);
});

// Process text messages
bot.on('text', async (ctx, next) => {
  try {
    const username = ctx.from.username;

    if (isDeveloper(username) && ctx.session?.step?.startsWith('waiting_for_tz')) {
      await processDevText(ctx);
    } else if (ctx.session && ctx.session.step) {
      await processText(ctx, next);
    } else {
      await next();
    }
  } catch (error) {
    console.error('Error processing text:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

// Handle contact sharing
bot.on('contact', async (ctx, next) => {
  if (ctx.session && ctx.session.step === 'waiting_for_contact') {
    await processText(ctx, next);
  } else {
    await next();
  }
});

// Error handling
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  showMenu(ctx);
});

module.exports = bot;
