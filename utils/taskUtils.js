const Task = require('../models/task');
const TechnicalTask = require('../models/technicalTask');

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
function formatTask(task) {
    if (!task) return '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';

    const statusEmoji = {
        'new': 'üÜï',
        'in_progress': 'üöß',
        'completed': '‚úÖ',
        'deleted': 'üóë'
    };

    const status = {
        'new': '–ù–æ–≤–∞—è',
        'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'deleted': '–£–¥–∞–ª–µ–Ω–∞'
    };

    return `${statusEmoji[task.status] || '‚ùì'} –ó–∞–¥–∞—á–∞: ${task.description}
üìä –°—Ç–∞—Ç—É—Å: ${status[task.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${task.contact}
${task.developer ? `üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${task.developer}` : ''}`;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–ª–∏–µ–Ω—Ç–∞
async function getClientTasks(clientId, status = null) {
    try {
        if (!clientId) throw new Error('Client ID is required');

        let query = { clientId };
        if (status) {
            if (Array.isArray(status)) {
                query.status = { $in: status };
            } else {
                query.status = status;
            }
        }
        return await Task.find(query).sort({ _id: -1 });
    } catch (error) {
        console.error('Error getting client tasks:', error);
        throw new Error(`Failed to get client tasks: ${error.message}`);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∫–ª–∏–µ–Ω—Ç–∞
async function getActiveTasks(clientId) {
    try {
        if (!clientId) throw new Error('Client ID is required');
        return await getClientTasks(clientId, ['new', 'in_progress']);
    } catch (error) {
        console.error('Error getting active tasks:', error);
        throw new Error(`Failed to get active tasks: ${error.message}`);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function updateTask(taskId, updates, username) {
    try {
        if (!taskId) throw new Error('Task ID is required');
        if (!updates || Object.keys(updates).length === 0) throw new Error('Updates are required');
        if (!username) throw new Error('Username is required');

        const task = await Task.findById(taskId);
        if (!task) throw new Error('Task not found');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const allowedUpdates = ['description', 'contact', 'status', 'developer'];
        const isValidOperation = Object.keys(updates).every(update => allowedUpdates.includes(update));
        if (!isValidOperation) throw new Error('Invalid updates');

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∑–∞–¥–∞—á–∏
        Object.keys(updates).forEach(key => {
            task[key] = updates[key];
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        task.history.push({
            action: 'updated',
            timestamp: new Date(),
            user: username,
            changes: updates
        });

        await task.save();
        return task;
    } catch (error) {
        console.error('Error updating task:', error);
        throw new Error(`Failed to update task: ${error.message}`);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function deleteTask(taskId, username) {
    try {
        if (!taskId) throw new Error('Task ID is required');
        if (!username) throw new Error('Username is required');

        const task = await Task.findById(taskId);
        if (!task) throw new Error('Task not found');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–¥–∞–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
        if (task.status === 'deleted') {
            throw new Error('Task is already deleted');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        task.history.push({
            action: 'deleted',
            timestamp: new Date(),
            user: username
        });

        task.status = 'deleted';
        await task.save();
        return true;
    } catch (error) {
        console.error('Error deleting task:', error);
        throw new Error(`Failed to delete task: ${error.message}`);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function createTechnicalTask(taskId, description, payment, developer) {
    try {
        if (!taskId) throw new Error('Task ID is required');
        if (!description) throw new Error('Description is required');
        if (!payment || isNaN(payment) || payment <= 0) throw new Error('Valid payment amount is required');
        if (!developer) throw new Error('Developer is required');

        const task = await Task.findById(taskId);
        if (!task) throw new Error('Task not found');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –¢–ó –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        const existingTZ = await TechnicalTask.findOne({ taskId });
        if (existingTZ) throw new Error('Technical task already exists for this task');

        const technicalTask = new TechnicalTask({
            taskId,
            description,
            payment,
            status: 'new',
            developer,
            history: [{
                action: 'created',
                timestamp: new Date(),
                user: developer
            }]
        });

        await technicalTask.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
        task.status = 'in_progress';
        task.developer = developer;
        task.history.push({
            action: 'technical_task_created',
            timestamp: new Date(),
            user: developer
        });
        await task.save();

        return technicalTask;
    } catch (error) {
        console.error('Error creating technical task:', error);
        throw new Error(`Failed to create technical task: ${error.message}`);
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏
function formatTaskHistory(history) {
    if (!history || !Array.isArray(history)) return '–ò—Å—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';

    const actionEmoji = {
        'created': 'üìù –°–æ–∑–¥–∞–Ω–∏–µ',
        'updated': '‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ',
        'deleted': 'üóë –£–¥–∞–ª–µ–Ω–∏–µ',
        'technical_task_created': 'üìã –°–æ–∑–¥–∞–Ω–∏–µ –¢–ó',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ'
    };

    return history.map((record, index) => {
        let text = `${index + 1}. ${actionEmoji[record.action] || '‚ùì ' + record.action}\n`;
        text += `üë§ ${record.user}\n`;
        text += `üïí ${new Date(record.timestamp).toLocaleString()}\n`;
        if (record.changes) {
            if (record.changes.description) {
                text += `üìù –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${record.changes.description}\n`;
            }
            if (record.changes.status) {
                text += `üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${record.changes.status}\n`;
            }
            if (record.changes.contact) {
                text += `üìû –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: ${record.changes.contact}\n`;
            }
        }
        return text;
    }).join('\n');
}

module.exports = {
    formatTask,
    getClientTasks,
    getActiveTasks,
    updateTask,
    deleteTask,
    createTechnicalTask,
    formatTaskHistory
}; 