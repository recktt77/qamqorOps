const { Markup } = require('telegraf');
const { formatTask, updateTask, deleteTask, formatTaskHistory } = require('../utils/taskUtils');
const Task = require('../models/task');
const clientMenu = require('../keyboards/clientMenu');
const TechnicalTask = require('../models/technicalTask');

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
    return new Date(date).toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
function formatAction(action) {
    const actionMap = {
        'created': '—Å–æ–∑–¥–∞–Ω–∞',
        'technical_task_created': '—Å–æ–∑–¥–∞–Ω–æ –¢–ó',
        'taken': '–≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É',
        'declined': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
        'completed': '–∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        'edited': '–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞'
    };
    return actionMap[action] || action;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
async function handleClientCallbacks(ctx) {
    try {
        if (!ctx.callbackQuery) {
            console.error('No callback query found');
            return;
        }

        const callbackData = ctx.callbackQuery.data;
        const userId = ctx.from.id;

        // –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π
        if (callbackData === 'cancel_edit' || callbackData === 'cancel_delete') {
            await ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
            await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
            await showMenu(ctx);
            return;
        }

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if (callbackData.startsWith('edit_task:')) {
            const taskId = callbackData.split(':')[1];
            const task = await Task.findById(taskId);

            if (!task) {
                await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (task.clientId !== userId) {
                await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏');
                await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            if (task.status === 'completed' || task.status === 'deleted') {
                await ctx.answerCbQuery('‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É');
                await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
                return;
            }

            ctx.session = {
                step: 'waiting_for_new_description',
                taskId: taskId
            };

            await ctx.answerCbQuery();
            await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
            await ctx.reply(
                'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n' +
                '–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' +
                task.description + '\n\n' +
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã',
                Markup.removeKeyboard()
            );
            return;
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        if (callbackData.startsWith('delete_task:')) {
            const taskId = callbackData.split(':')[1];
            const task = await Task.findById(taskId);

            if (!task) {
                await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (task.clientId !== userId) {
                await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏');
                await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            if (task.status === 'deleted') {
                await ctx.answerCbQuery('‚ùå –ó–∞–¥–∞—á–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞');
                await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
                return;
            }

            await deleteTask(taskId, ctx.from.username || ctx.from.id.toString());

            await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
            await ctx.deleteMessage().catch(err => console.error('Error deleting message:', err));
            await ctx.reply('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.', clientMenu);
            return;
        }

        // –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏
        if (callbackData.startsWith('task_history:')) {
            const taskId = callbackData.split(':')[1];
            await handleTaskHistory(ctx, taskId);
        } else if (callbackData.startsWith('tz_history:')) {
            const tzId = callbackData.split(':')[1];
            await handleTZHistory(ctx, tzId);
        } else if (callbackData === 'back_to_menu') {
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.inlineKeyboard([
                [
                    Markup.button.callback('üìù –ó–∞–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É', 'client_create_task'),
                    Markup.button.callback('‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É', 'client_edit_task')
                ],
                [
                    Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', 'client_delete_task'),
                    Markup.button.callback('üîó –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', 'client_view_progress')
                ]
            ]));
        }

    } catch (error) {
        console.error('Error in handleClientCallbacks:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞').catch(() => { });
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', clientMenu);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
async function showMenu(ctx) {
    try {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', clientMenu);
    } catch (error) {
        console.error('Error showing menu:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏
async function handleTaskHistory(ctx, taskId) {
    try {
        const task = await Task.findById(taskId);
        if (!task) {
            await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        let historyMessage = 'üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á–∏:\n\n';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        historyMessage += `–ó–∞–¥–∞—á–∞: ${task.description}\n`;
        historyMessage += `–°—Ç–∞—Ç—É—Å: ${task.status}\n`;
        historyMessage += `–ö–æ–Ω—Ç–∞–∫—Ç: ${task.contact}\n\n`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        historyMessage += 'üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n';
        for (const record of task.history) {
            historyMessage += `${formatDate(record.timestamp)} - ${formatAction(record.action)} (${record.user})\n`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¢–ó
        const tz = await TechnicalTask.findOne({ taskId: task._id });
        if (tz) {
            historyMessage += '\nüìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n';
            historyMessage += `–û–ø–∏—Å–∞–Ω–∏–µ: ${tz.description}\n`;
            historyMessage += `–û–ø–ª–∞—Ç–∞: ${tz.payment} —Ç–≥.\n`;
            historyMessage += `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${tz.developer}\n`;
            historyMessage += `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${tz.worker || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n\n`;

            historyMessage += 'üìù –ò—Å—Ç–æ—Ä–∏—è –¢–ó:\n';
            for (const record of tz.history) {
                historyMessage += `${formatDate(record.timestamp)} - ${formatAction(record.action)} (${record.user})\n`;
            }
        }

        await ctx.reply(historyMessage, {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([[
                Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_menu')
            ]])
        });
    } catch (error) {
        console.error('Error in handleTaskHistory:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á–∏.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¢–ó
async function handleTZHistory(ctx, tzId) {
    try {
        const tz = await TechnicalTask.findById(tzId);
        if (!tz) {
            await ctx.reply('‚ùå –¢–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
            return;
        }

        const task = await Task.findById(tz.taskId);
        if (!task) {
            await ctx.reply('‚ùå –°–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }

        let historyMessage = 'üìã –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:\n\n';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¢–ó
        historyMessage += `–ó–∞–¥–∞—á–∞: ${task.description}\n`;
        historyMessage += `–¢–ó: ${tz.description}\n`;
        historyMessage += `–û–ø–ª–∞—Ç–∞: ${tz.payment} —Ç–≥.\n`;
        historyMessage += `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${tz.developer}\n`;
        historyMessage += `–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${tz.worker || '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n`;
        historyMessage += `–°—Ç–∞—Ç—É—Å: ${tz.status}\n\n`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        historyMessage += 'üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n';
        for (const record of tz.history) {
            historyMessage += `${formatDate(record.timestamp)} - ${formatAction(record.action)} (${record.user})\n`;
        }

        await ctx.reply(historyMessage, {
            parse_mode: 'HTML',
            ...Markup.inlineKeyboard([[
                Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', 'back_to_menu')
            ]])
        });
    } catch (error) {
        console.error('Error in handleTZHistory:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¢–ó.');
    }
}

module.exports = {
    handleClientCallbacks,
    handleTaskHistory,
    handleTZHistory
}; 