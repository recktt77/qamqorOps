const { Markup } = require('telegraf');
const Task = require('../models/task');
const clientMenu = require('../keyboards/clientMenu');
const { formatTask, getActiveTasks, updateTask, deleteTask, getClientTasks } = require('../utils/taskUtils');

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
async function showMenuAfterAction(ctx) {
  const buttons = [
    [
      Markup.button.callback('üìù –ó–∞–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á—É', 'client_create_task'),
      Markup.button.callback('‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É', 'client_edit_task')
    ],
    [
      Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', 'client_delete_task'),
      Markup.button.callback('üîó –°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å', 'client_view_progress')
    ]
  ];
  if (ctx.callbackQuery) {
    // If coming from a callback query, edit the existing message
    await ctx.editMessageText(newText, Markup.inlineKeyboard(buttons));
  } else {
    // Send a new message and store its ID
    const sentMessage = await ctx.reply(newText, Markup.inlineKeyboard(buttons));
    ctx.session.menuMessageId = sentMessage.message_id;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function createTask(ctx) {
  try {
    ctx.session = { step: 'waiting_for_description' };

    if (ctx.callbackQuery) {
      await ctx.editMessageText(
        'üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É:\n\n' +
        '‚Ä¢ –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤\n' +
        '‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ\n' +
        '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'
      );
    } else {
      await ctx.reply(
        'üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É:\n\n' +
        '‚Ä¢ –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤\n' +
        '‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ\n' +
        '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'
      );
    }

  } catch (error) {
    console.error('Error in createTask:', error);
    await showMenuAfterAction(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    ctx.session = {};
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
function formatTaskDescription(description) {
  const shortDesc = description.length > 30 ? description.substring(0, 27) + '...' : description;
  return shortDesc;
}

// –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
async function requestContact(ctx) {
  return ctx.reply(
    'üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç:\n\n' +
    '‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79991234567)\n' +
    '‚Ä¢ Email –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: example@domain.com)\n\n' +
    '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' +
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã',
    Markup.keyboard([
      [Markup.button.contactRequest('üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞')],
      ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
    ]).resize()
  );
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function editTask(ctx) {
  try {
    const tasks = await getActiveTasks(ctx.from.id);

    if (tasks.length === 0) {
      await showMenuAfterAction(ctx, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
      return;
    }

    const buttons = tasks.map(task => {
      return [Markup.button.callback(
        `üìù ${formatTaskDescription(task.description)}`,
        `edit_task:${task._id}`
      )];
    });

    await ctx.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
      Markup.inlineKeyboard([
        ...buttons,
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_edit')]
      ])
    );
  } catch (error) {
    console.error('Error in editTask:', error);
    await showMenuAfterAction(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function deleteTaskCommand(ctx) {
  try {
    const tasks = await getActiveTasks(ctx.from.id);

    if (tasks.length === 0) {
      await showMenuAfterAction(ctx, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
      return;
    }

    const buttons = tasks.map(task => {
      return [Markup.button.callback(
        `üóë ${formatTaskDescription(task.description)}`,
        `delete_task:${task._id}`
      )];
    });

    await ctx.editMessageText(
      '‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
      Markup.inlineKeyboard([
        ...buttons,
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_delete')]
      ])
    );
  } catch (error) {
    console.error('Error in deleteTask:', error);
    await showMenuAfterAction(ctx, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
async function viewProgress(ctx) {
  try {
    const tasks = await getClientTasks(ctx.from.id);

    if (tasks.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.');
      await showMenuAfterAction(ctx);
      return;
    }

    for (const task of tasks) {
      const buttons = [
        [
          Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π', `task_history:${task._id}`),
          Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_task:${task._id}`)
        ]
      ];

      await ctx.reply(
        formatTask(task),
        Markup.inlineKeyboard(buttons)
      );
    }
    await showMenuAfterAction(ctx);
  } catch (error) {
    console.error('Error in viewProgress:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    await showMenuAfterAction(ctx);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function processText(ctx, next) {
  try {
    if (!ctx.session || !ctx.session.step) {
      return next();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    if (ctx.session.step === 'waiting_for_description') {
      const description = ctx.message.text.trim();

      if (description.toLowerCase() === '/cancel') {
        ctx.session = {};
        await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        await showMenuAfterAction(ctx);
        return;
      }

      if (description.length < 10) {
        return ctx.reply(
          '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:'
        );
      }

      ctx.session.description = description;
      ctx.session.step = 'waiting_for_contact';
      await requestContact(ctx);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if (ctx.session.step === 'waiting_for_contact') {
      if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' || ctx.message.text?.toLowerCase() === '/cancel') {
        ctx.session = {};
        await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', Markup.removeKeyboard());
        await showMenuAfterAction(ctx);
        return;
      }

      let contact;
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
      if (ctx.message.contact) {
        contact = '+' + ctx.message.contact.phone_number.replace(/[^0-9]/g, '');
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç —Ç–µ–∫—Å—Ç–æ–º
        const text = ctx.message.text.trim();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        const isEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(text);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const cleanPhone = text.replace(/[^0-9]/g, '');
        const isPhone = cleanPhone.length >= 10 && cleanPhone.length <= 15;

        if (!isEmail && !isPhone) {
          return ctx.reply(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n\n' +
            '‚Ä¢ Email: example@domain.com\n' +
            '‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +79991234567\n\n' +
            '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º"\n' +
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'
          );
        }

        contact = isEmail ? text : '+' + cleanPhone;
      }

      ctx.session.contact = contact;
      await saveTask(ctx);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (ctx.session.step === 'waiting_for_new_description') {
      const newDescription = ctx.message.text.trim();

      if (newDescription.toLowerCase() === '/cancel') {
        ctx.session = {};
        await ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        await showMenuAfterAction(ctx);
        return;
      }

      if (newDescription.length < 10) {
        return ctx.reply(
          '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:'
        );
      }

      try {
        await updateTask(
          ctx.session.taskId,
          { description: newDescription },
          ctx.from.username || ctx.from.id.toString()
        );

        ctx.session = {};
        await ctx.reply('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        await showMenuAfterAction(ctx);
      } catch (error) {
        console.error('Error updating task:', error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É.');
        ctx.session = {};
        await showMenuAfterAction(ctx);
      }
      return;
    }

    return next();
  } catch (error) {
    console.error('Error in processText:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    ctx.session = {};
    await showMenuAfterAction(ctx);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
async function saveTask(ctx) {
  try {
    if (!ctx.session.description || !ctx.session.contact) {
      throw new Error('Missing required fields');
    }

    const task = new Task({
      description: ctx.session.description,
      contact: ctx.session.contact,
      clientId: ctx.from.id,
      status: 'new',
      history: [{
        action: 'created',
        timestamp: new Date(),
        user: ctx.from.username || ctx.from.id.toString()
      }]
    });

    await task.save();

    ctx.session = {};
    await ctx.reply(
      '‚úÖ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
      Markup.removeKeyboard()
    );
    await showMenuAfterAction(ctx);
  } catch (error) {
    console.error('Error in saveTask:', error);
    await ctx.reply(
      '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      Markup.removeKeyboard()
    );
    ctx.session = {};
    await showMenuAfterAction(ctx);
  }
}

module.exports = {
  createTask,
  editTask,
  deleteTaskCommand,
  viewProgress,
  processText
};
