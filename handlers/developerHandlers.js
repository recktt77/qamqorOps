const { Markup } = require('telegraf');
const Task = require('../models/task');
const TechnicalTask = require('../models/technicalTask');
const { formatTask } = require('../utils/taskUtils');
const { isDeveloper } = require('../utils/helpers');

// –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
async function listTasks(ctx) {
  try {
    if (!isDeveloper(ctx.from.username)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const tasks = await Task.find({ status: 'new' }).sort({ _id: -1 });

    if (tasks.length === 0) {
      await ctx.reply('–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.');
      return;
    }

    for (const task of tasks) {
      const buttons = [
        [
          Markup.button.callback('‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_task:${task._id}`),
          Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è', `task_history:${task._id}`)
        ]
      ];

      await ctx.reply(formatTask(task), Markup.inlineKeyboard(buttons));
    }
  } catch (error) {
    console.error('Error in listTasks:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¢–ó
async function createTZ(ctx, taskId) {
  try {
    if (!isDeveloper(ctx.from.username)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const task = await Task.findById(taskId);
    if (!task) {
      await ctx.reply('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –¢–ó –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
    const existingTZ = await TechnicalTask.findOne({ taskId: task._id });
    if (existingTZ) {
      await ctx.reply('‚ùå –î–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –¢–ó.');
      return;
    }

    ctx.session = {
      step: 'waiting_for_tz_description',
      taskId: taskId,
      originalTask: task
    };

    await ctx.reply(
      'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:\n\n' +
      '–ò—Å—Ö–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞:\n' +
      `${task.description}\n\n` +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã'
    );
  } catch (error) {
    console.error('Error in createTZ:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¢–ó.');
  }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
async function listInProgressTasks(ctx) {
  try {
    if (!isDeveloper(ctx.from.username)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const tasks = await Task.find({
      status: 'in_progress',
      developer: ctx.from.username
    }).sort({ _id: -1 });

    if (tasks.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ.');
      return;
    }

    for (const task of tasks) {
      const tz = await TechnicalTask.findOne({ taskId: task._id });
      const buttons = [
        [
          Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', `complete_task:${task._id}`),
          Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è', `task_history:${task._id}`)
        ]
      ];

      let message = formatTask(task);
      if (tz) {
        message += `\n\nüìÑ –¢–ó: ${tz.description}\nüí∞ –û–ø–ª–∞—Ç–∞: ${tz.payment} —Ç–≥.`;
      }

      await ctx.reply(message, Markup.inlineKeyboard(buttons));
    }
  } catch (error) {
    console.error('Error in listInProgressTasks:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –≤ —Ä–∞–±–æ—Ç–µ.');
  }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
async function listCompletedTasks(ctx) {
  try {
    if (!isDeveloper(ctx.from.username)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }

    const tasks = await Task.find({
      status: 'completed',
      developer: ctx.from.username
    }).sort({ _id: -1 });

    if (tasks.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.');
      return;
    }

    for (const task of tasks) {
      const tz = await TechnicalTask.findOne({ taskId: task._id });
      const buttons = [
        [Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è', `task_history:${task._id}`)]
      ];

      let message = formatTask(task);
      if (tz) {
        message += `\n\nüìÑ –¢–ó: ${tz.description}\nüí∞ –û–ø–ª–∞—Ç–∞: ${tz.payment} —Ç–≥.`;
      }

      await ctx.reply(message, Markup.inlineKeyboard(buttons));
    }
  } catch (error) {
    console.error('Error in listCompletedTasks:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
async function processDevText(ctx) {
  try {
    if (!ctx.session || !ctx.session.step) {
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¢–ó - –æ–ø–∏—Å–∞–Ω–∏–µ
    if (ctx.session.step === 'waiting_for_tz_description') {
      const description = ctx.message.text.trim();

      if (description.toLowerCase() === '/cancel') {
        ctx.session = {};
        await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ –¢–ó –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
      }

      if (description.length < 10) {
        return ctx.reply(
          '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¢–ó –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:'
        );
      }

      ctx.session.tzDescription = description;
      ctx.session.step = 'waiting_for_tz_payment';

      await ctx.reply(
        'üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ–Ω–≥–µ:\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15000'
      );
      return;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¢–ó - —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã
    if (ctx.session.step === 'waiting_for_tz_payment') {
      const payment = parseInt(ctx.message.text.trim());

      if (isNaN(payment) || payment <= 0) {
        return ctx.reply(
          '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: 15000'
        );
      }

      try {
        const task = await Task.findById(ctx.session.taskId);
        if (!task) {
          throw new Error('Task not found');
        }

        const tz = new TechnicalTask({
          taskId: ctx.session.taskId,
          description: ctx.session.tzDescription,
          payment: payment,
          status: 'new',
          developer: ctx.from.username,
          history: [{
            action: 'created',
            timestamp: new Date(),
            user: ctx.from.username
          }]
        });

        await tz.save();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
        task.status = 'in_progress';
        task.developer = ctx.from.username;
        task.history.push({
          action: 'technical_task_created',
          timestamp: new Date(),
          user: ctx.from.username
        });
        await task.save();

        ctx.session = {};
        await ctx.reply('‚úÖ –¢–ó —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!');
      } catch (error) {
        console.error('Error saving TZ:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¢–ó.');
        ctx.session = {};
      }
      return;
    }
  } catch (error) {
    console.error('Error in processDevText:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    ctx.session = {};
  }
}

module.exports = {
  listTasks,
  createTZ,
  listInProgressTasks,
  listCompletedTasks,
  processDevText
};
