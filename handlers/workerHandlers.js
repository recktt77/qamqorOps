const { Markup } = require('telegraf');
const Task = require('../models/task');
const TechnicalTask = require('../models/technicalTask');
const { isWorker } = require('../utils/helpers');

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function formatStatus(status) {
  const statusMap = {
    'new': 'üÜï –ù–æ–≤–æ–µ',
    'in_progress': 'üöß –í —Ä–∞–±–æ—Ç–µ',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
    'declined': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
  };
  return statusMap[status] || status;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–ó –¥–ª—è –≤—ã–≤–æ–¥–∞
function formatTZ(tz, task) {
  const formattedDate = new Date(tz.createdAt).toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });

  return `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ üìÑ <b>–¢–ó #${tz._id.toString().slice(-6)}</b>
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ üìù <b>–ó–∞–¥–∞—á–∞:</b>
‚îÇ ${task.description}
‚îÇ
‚îÇ üìã <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>
‚îÇ ${tz.description}
‚îÇ
‚îÇ üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> ${tz.payment} —Ç–≥.
‚îÇ üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> ${tz.developer}
${tz.worker ? `‚îÇ üë∑ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${tz.worker}\n` : ''}‚îÇ üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${formatStatus(tz.status)}
‚îÇ üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> ${formattedDate}
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
async function showWorkerMenu(ctx) {
  const buttons = [
    [
      Markup.button.callback('üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¢–ó', 'worker_available_tz')
    ],
    [
      Markup.button.callback('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞–±–æ—Ç—ã', 'worker_decline'),
      Markup.button.callback('‚úî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É', 'worker_complete')
    ]
  ];

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.inlineKeyboard(buttons));
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¢–ó
async function listAvailableTZ(ctx) {
  try {
    if (!isWorker(ctx.from.username)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    const technicalTasks = await TechnicalTask.find({
      $or: [
        { status: 'new', worker: { $exists: false } },
        { status: 'new', worker: null }
      ]
    }).sort({ _id: -1 });

    if (technicalTasks.length === 0) {
      await ctx.reply(
        'üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¢–ó.\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.',
        Markup.inlineKeyboard([[
          Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'worker_available_tz')
        ]])
      );
      return;
    }

    await ctx.reply(`üì¨ –ù–∞–π–¥–µ–Ω–æ –¢–ó: ${technicalTasks.length}`);

    for (const tz of technicalTasks) {
      const task = await Task.findById(tz.taskId);
      if (!task) continue;

      const buttons = [
        [
          Markup.button.callback('‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', `take_tz:${tz._id}`),
          Markup.button.callback('üìã –ò—Å—Ç–æ—Ä–∏—è', `tz_history:${tz._id}`)
        ]
      ];

      await ctx.reply(formatTZ(tz, task), {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(buttons)
      });
    }
  } catch (error) {
    console.error('Error in listAvailableTZ:', error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¢–ó.\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    );
  }
}

// –û—Ç–∫–∞–∑ –æ—Ç —Ä–∞–±–æ—Ç—ã
async function declineWork(ctx) {
  try {
    if (!isWorker(ctx.from.username)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    const username = ctx.from.username;
    console.log(`Searching tasks for worker: ${username}`);

    const activeTasks = await TechnicalTask.find({
      worker: username,
      status: 'in_progress'
    });

    console.log(`Found ${activeTasks.length} active tasks`);

    if (activeTasks.length === 0) {
      await ctx.reply(
        'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–∫–∞–∑–∞.\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É.',
        Markup.inlineKeyboard([[
          Markup.button.callback('üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¢–ó', 'worker_available_tz')
        ]])
      );
      return;
    }

    await ctx.reply(`üöß –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${activeTasks.length}):`);

    for (const tz of activeTasks) {
      const task = await Task.findById(tz.taskId);
      if (!task) {
        console.log(`Task not found for TZ: ${tz._id}`);
        continue;
      }

      const buttons = [
        [Markup.button.callback('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', `decline_tz:${tz._id}`)]
      ];

      await ctx.reply(formatTZ(tz, task), {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(buttons)
      });
    }
  } catch (error) {
    console.error('Error in declineWork:', error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    );
  }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
async function completeWork(ctx) {
  try {
    if (!isWorker(ctx.from.username)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    const username = ctx.from.username;
    console.log(`Searching tasks for worker: ${username}`);

    const activeTasks = await TechnicalTask.find({
      worker: username,
      status: 'in_progress'
    });

    console.log(`Found ${activeTasks.length} active tasks`);

    if (activeTasks.length === 0) {
      await ctx.reply(
        'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n' +
        '–í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É.',
        Markup.inlineKeyboard([[
          Markup.button.callback('üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¢–ó', 'worker_available_tz')
        ]])
      );
      return;
    }

    await ctx.reply(`üöß –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${activeTasks.length}):`);

    for (const tz of activeTasks) {
      const task = await Task.findById(tz.taskId);
      if (!task) {
        console.log(`Task not found for TZ: ${tz._id}`);
        continue;
      }

      const buttons = [
        [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', `complete_tz:${tz._id}`)]
      ];

      await ctx.reply(formatTZ(tz, task), {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(buttons)
      });
    }
  } catch (error) {
    console.error('Error in completeWork:', error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –¢–ó
async function handleTZAction(ctx, action, tzId) {
  try {
    if (!isWorker(ctx.from.username)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }

    console.log(`Processing ${action} action for TZ ${tzId} by worker ${ctx.from.username}`);

    const tz = await TechnicalTask.findById(tzId);
    if (!tz) {
      console.log(`TZ ${tzId} not found`);
      await ctx.reply('‚ùå –¢–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }

    const task = await Task.findById(tz.taskId);
    if (!task) {
      console.log(`Task ${tz.taskId} not found for TZ ${tzId}`);
      await ctx.reply('‚ùå –°–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      return;
    }

    console.log(`Current TZ status: ${tz.status}, worker: ${tz.worker}`);

    switch (action) {
      case 'take':
        if (tz.status !== 'new' || tz.worker) {
          console.log(`Cannot take TZ: status=${tz.status}, worker=${tz.worker}`);
          await ctx.reply(
            '‚ùå –≠—Ç–æ –¢–ó —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ.\n' +
            '–í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.'
          );
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¢–ó
        const tzUpdate = {
          status: 'in_progress',
          worker: ctx.from.username,
          $push: {
            history: {
              action: 'taken',
              timestamp: new Date(),
              user: ctx.from.username
            }
          }
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        const taskUpdate = {
          $push: {
            history: {
              action: 'worker_assigned',
              timestamp: new Date(),
              user: ctx.from.username
            }
          }
        };

        await Promise.all([
          TechnicalTask.findByIdAndUpdate(tzId, tzUpdate),
          Task.findByIdAndUpdate(tz.taskId, taskUpdate)
        ]);

        console.log(`TZ ${tzId} taken by worker ${ctx.from.username}`);
        await ctx.reply(
          '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –¢–ó –≤ —Ä–∞–±–æ—Ç—É!\n\n' +
          '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
          '‚Ä¢ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n' +
          '‚Ä¢ –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –µ—ë –≤—ã–ø–æ–ª–Ω–∏—Ç—å',
          Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', `complete_tz:${tzId}`)],
            [Markup.button.callback('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è', `decline_tz:${tzId}`)]
          ])
        );
        break;

      case 'decline':
        if (tz.worker !== ctx.from.username || tz.status !== 'in_progress') {
          console.log(`Cannot decline TZ: status=${tz.status}, worker=${tz.worker}`);
          await ctx.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –¢–ó.');
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¢–ó
        const tzDeclineUpdate = {
          status: 'new',
          worker: null,
          $push: {
            history: {
              action: 'declined',
              timestamp: new Date(),
              user: ctx.from.username
            }
          }
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        const taskDeclineUpdate = {
          $push: {
            history: {
              action: 'worker_declined',
              timestamp: new Date(),
              user: ctx.from.username
            }
          }
        };

        await Promise.all([
          TechnicalTask.findByIdAndUpdate(tzId, tzDeclineUpdate),
          Task.findByIdAndUpdate(tz.taskId, taskDeclineUpdate)
        ]);

        console.log(`TZ ${tzId} declined by worker ${ctx.from.username}`);
        await ctx.reply(
          '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –¢–ó.\n' +
          '–¢–µ–ø–µ—Ä—å —ç—Ç–æ –¢–ó —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.',
          Markup.inlineKeyboard([[
            Markup.button.callback('üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¢–ó', 'worker_available_tz')
          ]])
        );
        break;

      case 'complete':
        if (tz.worker !== ctx.from.username || tz.status !== 'in_progress') {
          console.log(`Cannot complete TZ: status=${tz.status}, worker=${tz.worker}`);
          await ctx.reply('‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ –¢–ó.');
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –¢–ó
        const tzCompleteUpdate = {
          status: 'completed',
          $push: {
            history: {
              action: 'completed',
              timestamp: new Date(),
              user: ctx.from.username
            }
          }
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        const taskCompleteUpdate = {
          status: 'completed',
          $push: {
            history: {
              action: 'completed_by_worker',
              timestamp: new Date(),
              user: ctx.from.username
            }
          }
        };

        await Promise.all([
          TechnicalTask.findByIdAndUpdate(tzId, tzCompleteUpdate),
          Task.findByIdAndUpdate(tz.taskId, taskCompleteUpdate)
        ]);

        console.log(`TZ ${tzId} completed by worker ${ctx.from.username}`);
        await ctx.reply(
          'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–ó —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n' +
          '–í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.',
          Markup.inlineKeyboard([[
            Markup.button.callback('üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¢–ó', 'worker_available_tz')
          ]])
        );
        break;

      default:
        console.log(`Unknown action: ${action}`);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
    }
  } catch (error) {
    console.error(`Error in handleTZAction (${action}):`, error);
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
    );
  }
}

module.exports = {
  listAvailableTZ,
  declineWork,
  completeWork,
  handleTZAction,
  showWorkerMenu
};
